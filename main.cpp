#include <iostream>
#include "english_list.h"
#include <cstdint>

// HINTS:
// To check if a word is an English word, call EnglishList::search()
// Lookup times can be improved by using a different data type for the list. (CS 32 stuff...)

using namespace std;

string cipher_encrypt(string message, uint64_t key)
{
    // Return the encrypted string
    
    // The encryption method: the word will be shift left by a randomly selected number ranged from 1-26, which is generated by a key
    
    srand((unsigned int)key); // generate random seed
    unsigned int left_shift = rand() % 27 + 1; // left shifter range from 1 - 26
    
    for (int i = 0; i < message.length(); i++) {
        message[i] = (char)message[i] - left_shift;
    }
    return message;
}

string cipher_decrypt(string ciphertext, uint64_t key)
{
    // Return the decrypted string
    
    // The decryption method: the word will be shift left by a number ranged from 1-26, generated by the same key used to encrypt the cypher txt
    srand((unsigned int)key); // generate random seed
    unsigned int right_shift = rand() % 27 + 1; // right shifter range from 1 - 26
    
    for (int i = 0; i < ciphertext.length(); i++) {
        ciphertext[i] = (char)ciphertext[i] + right_shift;
    }
    return ciphertext;
}

//string cipher_break(string ciphertext)
//{
//    // Implement this in TIER 2
//    return "";
//}

string testString = "A trapdoor function is a function that is easy to compute in one direction, yet believed to be difficult to compute in the opposite direction (finding its inverse) without special information, called the \"trapdoor\". Trapdoor functions are widely used in cryptography.";

int main(void)
{
    bool failed = false;

    for(int i = 0; i < 1000; i++)
    {
        if(testString != cipher_decrypt(cipher_encrypt(testString, i), i))
        {
            cout << "Failed at key " << i << endl;
            failed = true;
        }
    }

    if(!failed)
    {
        cout << "Succeeded for all test keys!" << endl;
    }

    return 0;
}
